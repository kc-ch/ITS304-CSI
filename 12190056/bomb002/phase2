Phase 1 defused. How about the next one?
1 2 3 4 5 6 // First user input.

Breakpoint 3, 0x0000000000400ea9 in phase_2 () //break point 

The break point for phase_2 that was set earlier before running the phase_1 code is executed as the input is incorrect.  
(gdb) disas // displays the code of phase_2

we focus on the command like compare, mov jne,je and ja compared to add sub, it is because this comments help to get the sloution faster. Now, we will move to cmpl command to compare those registers.
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--0x4023cc
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) u* 0x0000000000400ec7 // moving pointer the cmpl command.
0x0000000000400ec7 in phase_2 ()
(gdb) disas // displaying phase_2 code pointing to current code.
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
=> 0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp) //compares those two values.
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) i r // shows information of all the registers
rax            0x6                 6
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x0                 0x0
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400ec7            0x400ec7 <phase_2+30>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

(gdb) x/d 0x7ffffffee300 // printing the value of 0x7ffffffee300
0x7ffffffee300: 1 // value of that address.
(gdb) ni //next line
0x0000000000400ecb in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
=> 0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41> // jump if equal. Checks the if the values compared are equal or not.
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb> // this commands explodes the bomb.
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) disas // disassembler
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
=> 0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41> // if the above values in cmpl are equal, then it jumps to line 41
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) ni //next instruction

We will move to next instruction to make in action.
0x0000000000400ed2 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
=> 0x0000000000400ed2 <+41>:    mov    %rsp,%rbx // moves the values.
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) i r //checks the value of register to verify whether it is the values are moved or not.
rax            0x6                 6
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x0                 0x0
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400ed2            0x400ed2 <phase_2+41>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni // moved to next instruction to execute.
0x0000000000400ed5 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
=> 0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp // code that is currently pointed.
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x7ffffffee300      140737488282368
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x0                 0x0
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400ed5            0x400ed5 <phase_2+44>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u* 0x0000000000400ede //moving directly to the cmp command to compare the values.
0x0000000000400ede in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
=> 0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx) // comparing the values.
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.

In this cmp command, the eax and Ox4(%rbx) is compared. In Ox4(%rbx), we need to add 4 to the address to rbx while printing the value of rbx.
(gdb) i r
rax            0x2                 2
rbx            0x7ffffffee300      140737488282368
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x7ffffffee314      0x7ffffffee314
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400ede            0x400ede <phase_2+53>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7ffffffee304// printing value.
0x7ffffffee304: 2 // value of rbx
(gdb) ni
0x0000000000400ee1 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
=> 0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>// jupms if the above cmp command is equal else skips this command.
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) ni // moving to next instruction.
0x0000000000400ee8 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
=> 0x0000000000400ee8 <+63>:    add    $0x4,%rbx // current code that is pointed.
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7ffffffee300      140737488282368
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x7ffffffee314      0x7ffffffee314
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400ee8            0x400ee8 <phase_2+63>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7ffffffee300 // printing the value.
0x7ffffffee300: 1 //value for 0x7ffffffee300.
(gdb) ni
0x0000000000400eec in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
=> 0x0000000000400eec <+67>:    cmp    %rbp,%rbx // compares those two value of register
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) i r // finding the address or value of those register to compare them.
rax            0x2                 2
rbx            0x7ffffffee304      140737488282372
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x7ffffffee314      0x7ffffffee314
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400eec            0x400eec <phase_2+67>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7ffffffee314 //printing the value
0x7ffffffee314: 6 //value
(gdb) ni
0x0000000000400eef in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
=> 0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49> // this instruction jumps if above comparasion id not equal else it is skipped.
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) ni
0x0000000000400eda in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
=> 0x0000000000400eda <+49>:    mov    (%rbx),%eax // redirected back to instruction 49 which means it is a for loop.
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) ni
0x0000000000400edc in phase_2 ()
(gdb) i r
rax            0x2                 2
rbx            0x7ffffffee304      140737488282372
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x7ffffffee314      0x7ffffffee314
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400edc            0x400edc <phase_2+51>
eflags         0x287               [ CF PF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7ffffffee304
0x7ffffffee304: 2 //values
(gdb) ni
0x0000000000400ede in phase_2 ()
(gdb) ni
0x0000000000400ee1 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
=> 0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63> jumps if the above comparasion are equal else skips.
   0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) i r
rax            0x4                 4
rbx            0x7ffffffee304      140737488282372
rcx            0x0                 0
rdx            0x7ffffffee314      140737488282388
rsi            0x0                 0
rdi            0x7ffffffedc90      140737488280720
rbp            0x7ffffffee314      0x7ffffffee314
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400ee1            0x400ee1 <phase_2+56>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7ffffffee304
0x7ffffffee304: 2 //values
(gdb) ni
0x0000000000400ee3 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:    je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:    callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:    mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:    lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:    mov    (%rbx),%eax
   0x0000000000400edc <+51>:    add    %eax,%eax
   0x0000000000400ede <+53>:    cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:    je     0x400ee8 <phase_2+63>
=> 0x0000000000400ee3 <+58>:    callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:    add    $0x4,%rbx
   0x0000000000400eec <+67>:    cmp    %rbp,%rbx
   0x0000000000400eef <+70>:    jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:    mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:    xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:    je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:    add    $0x28,%rsp
   0x0000000000400f0a <+97>:    pop    %rbx
   0x0000000000400f0b <+98>:    pop    %rbp
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f0c <+99>:    retq
End of assembler dump.
(gdb) ni

Since the next instruction explodes the bomb so the break points is executed.

Breakpoint 4, 0x0000000000401438 in explode_bomb ()
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) b phase_3
Breakpoint 5 at 0x400f0d
(gdb) b explode_bomb
Breakpoint 6 at 0x401438
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/Sonam choki/OneDrive/Desktop/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
