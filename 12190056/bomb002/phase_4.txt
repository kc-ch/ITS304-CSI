(gdb) b phase_4  //set breakpoint for phase 4
Breakpoint 1 at 0x40100e 
(gdb) b explode_bomb   //set breakpoint for explode_bomb
Breakpoint 2 at 0x401438
(gdb) r kcc.txt
Starting program: /home/gcit/Desktop/Assignment 1_2 (1)/Assignment 1/bomb002/bomb kcc.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
2 4  //incorrect input

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4: //assembly code for phase_4
=> 0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi //Moves two integer to esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt> //gets the user input, And i gave 2, 4
   0x0000000000401034 <+38>:	cmp    $0x2,%eax  // compares 2 and eax, where eax  = 2. Since it is equal, it moves to next instruction.
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54> //if it is not equal, the bomb gets exploded.
   0x0000000000401039 <+43>:	mov    (%rsp),%eax 
   0x000000000040103c <+46>:	sub    $0x2,%eax //substract 2 from eax(4), now eax = 2.
   0x000000000040103f <+49>:	cmp    $0x2,%eax 
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59> 
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi 
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000401034
0x0000000000401034 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000401034 <+38>:	cmp    $0x2,%eax // compares 2 and eax, eax = 2
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2 //eax = 2
rbx            0x7fffffffde68      140737488346728
rcx            0x0                 0
rdx            0x7fffffffdd50      140737488346448
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x401034            0x401034 <phase_4+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) ni
0x0000000000401037 in phase_4 ()
(gdb) ni
0x0000000000401039 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
=> 0x0000000000401039 <+43>:	mov    (%rsp),%eax //%rsp contains second term of value which is 4.
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) u* 0x000000000040103f
0x000000000040103f in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
=> 0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59> // since 2 and eax are equal, so it jumps to 59 instruction.
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2 //eax=2
rbx            0x7fffffffde68      140737488346728
rcx            0x0                 0
rdx            0x7fffffffdd50      140737488346448
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x40103f            0x40103f <phase_4+49>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) ni
0x0000000000401042 in phase_4 ()
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffde68      140737488346728
rcx            0x0                 0
rdx            0x7fffffffdd50      140737488346448
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x401042            0x401042 <phase_4+52>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) ni
0x0000000000401049 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
=> 0x0000000000401049 <+59>:	mov    (%rsp),%esi // moves the value in rsp to esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) u*  0x0000000000401056
0x0000000000401056 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
=> 0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax // we add the 4 with %rsp and compare it with eax
   0x000000000040105a <+76>:	je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) ni
0x000000000040105a in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	mov    %rsp,%rcx
   0x0000000000401025 <+23>:	lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:	mov    $0x4025b7,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:	mov    (%rsp),%eax
   0x000000000040103c <+46>:	sub    $0x2,%eax
   0x000000000040103f <+49>:	cmp    $0x2,%eax
   0x0000000000401042 <+52>:	jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:	callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:	mov    (%rsp),%esi
   0x000000000040104c <+62>:	mov    $0x5,%edi
   0x0000000000401051 <+67>:	callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:	cmp    0x4(%rsp),%eax
=> 0x000000000040105a <+76>:	je     0x401061 <phase_4+83> //checking whether 0x4(%rsp),%eax are equal or not.
   0x000000000040105c <+78>:	callq  0x401438 <explode_bomb> //since the value of 0x4(%rsp) and %eax are not equal so the bomb gets exploded.
   0x0000000000401061 <+83>:	mov    0x8(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401066 <+88>:	xor    %fs:0x28,%rax
   0x000000000040106f <+97>:	je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401076 <+104>:	add    $0x18,%rsp
   0x000000000040107a <+108>:	retq   
End of assembler dump.
(gdb) i r
rax            0x30                48 //eax = 48 since the value of eax is = 48, we can conclude that the value of first input is = 48
rbx            0x7fffffffde68      140737488346728
rcx            0x0                 0
rdx            0x7fffffffdd50      140737488346448
rsi            0x4                 4
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x40105a            0x40105a <phase_4+76>
eflags         0x216               [ PF AF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) x/d 0x7fffffffdd50 // checking the value of rsp, in order to get the value of second input.
0x7fffffffdd50:	4
(gdb) delete // deleting all the breakpoint
Delete all breakpoints? (y or n) y
(gdb) b phase_5 //setting the breakpoint of next phase (phase_5).
Breakpoint 3 at 0x40107b
(gdb) b explode_bomb //setting the breakpoint for explode_bomb
Breakpoint 4 at 0x401438
(gdb) r kcc.txt //running the program
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/gcit/Desktop/Assignment 1_2 (1)/Assignment 1/bomb002/bomb kcc.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
48 4 // bomb for phase_4 is defused
So you got that one.  Try this one.

