(gdb) b phase_5
Breakpoint 1 at 0x40107b
(gdb) b explode_bomb
Breakpoint 2 at 0x401438
(gdb) r kcc.txt
Starting program: /home/gcit/Desktop/Assignment 1_2 (1)/Assignment 1/bomb002/bomb kcc.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
48 4
So you got that one.  Try this one.
5 3 // Input that I gave

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi // Accepts "%d %d" inputs
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax 
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) u* 0x00000000004010a1
0x00000000004010a1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x00000000004010a1 <+38>:	cmp    $0x1,%eax // compares the value 1 and eax, where eax = 2
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48> // Since the value of eax is greater than 1, it jumps to instruction 48.
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) i r
rax            0x2                 2 //value of eax
rbx            0x7fffffffde68      140737488346728
rcx            0x0                 0
rdx            0x7fffffffdd54      140737488346452
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x4010a1            0x4010a1 <phase_5+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u* 0x00000000004010ab
0x00000000004010ab in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
=> 0x00000000004010ab <+48>:	mov    (%rsp),%eax // it moves the value of %rsp to eax
   0x00000000004010ae <+51>:	and    $0xf,%eax // AND operation is performed and stored in eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp) // now the value of eax is moved to %rsp
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) u* 0x00000000004010b4
0x00000000004010b4 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
=> 0x00000000004010b4 <+57>:	cmp    $0xf,%eax // the value 15c is compared with eax, where eax = 5
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109> // since 15 and 5 is not equal, it does not jumps to instruction 109.
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) i r
rax            0x5                 5 //value of eax
rbx            0x7fffffffde68      140737488346728
rcx            0x0                 0
rdx            0x7fffffffdd54      140737488346452
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x4010b4            0x4010b4 <phase_5+57>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x00000000004010b7 in phase_5 ()
(gdb) ni
0x00000000004010b9 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
=> 0x00000000004010b9 <+62>:	mov    $0x0,%ecx //0 is moved to ecx, now ecx = 0.
   0x00000000004010be <+67>:	mov    $0x0,%edx // 0 is moved to edx, now edx = 0.
   0x00000000004010c3 <+72>:	add    $0x1,%edx // the edx is incremented by 1, edx = 1
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) u* 0x00000000004010d1
0x00000000004010d1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
=> 0x00000000004010d1 <+86>:	cmp    $0xf,%eax // the value 15 is compared to eax, where eax = 12
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72> //since the above operand are not equal, it jumps to instruction 72. So, there is a 									loop formed and it stops when the value of eax is equal to 15.
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) i r
rax            0xc                 12 //new value for eax
rbx            0x7fffffffde68      140737488346728
rcx            0xc                 12
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x4010d1            0x4010d1 <phase_5+86>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u* 0x00000000004010d6
0x00000000004010d6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax 
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
=> 0x00000000004010d6 <+91>:	movl   $0xf,(%rsp) // now assuming that $0xf is equal to eax, it had moved to this instruction.
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) ni
0x00000000004010dd in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
=> 0x00000000004010dd <+98>:	cmp    $0xf,%edx // the $0xf is compared with the value of edx, edx = 15
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109> // as the $0xf is equal to the value of edx, so it moves to next instruction. So, i 									concluded that the first input 5 was correct as the bomb doesnot get exploded.
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx 
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x7fffffffde68      140737488346728
rcx            0x73                115
rdx            0xf                 15 // value of edx
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x4010dd            0x4010dd <phase_5+98>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x00000000004010e0 in phase_5 ()
(gdb) ni
0x00000000004010e2 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
=> 0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx // compares the value of 0x4(%rsp) and %ecx, where 0x4(%rsp) = 3 and ecx = 115
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114> 
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x7fffffffde68      140737488346728
rcx            0x73                115 //value of ecx
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7fffffffd700      140737488344832
rbp            0x0                 0x0
rsp            0x7fffffffdd50      0x7fffffffdd50
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f59ac0      140737353456320
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde60      140737488346720
r14            0x0                 0
r15            0x0                 0
rip            0x4010e2            0x4010e2 <phase_5+103>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffdd54
0x7fffffffdd54:	3
(gdb) ni
0x00000000004010e6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
=> 0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114> // since it 3 and 115 are not equal, it moves to next instruction which explodes the 								bomb. So, from here we can conclude that the second value is the value of ecx, 									where ecx = 115
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
--Type <RET> for more, q to quit, c to continue without paging--
End of assembler dump.
(gdb) delete //deleting the all the breakpoints
Delete all breakpoints? (y or n) y
(gdb) r kcc.txt // running the code
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/gcit/Desktop/Assignment 1_2 (1)/Assignment 1/bomb002/bomb kcc.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
48 4
So you got that one.  Try this one.
5 115 // phase_5 defused
Good work!  On to the next...

