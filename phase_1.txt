Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...

Creating breakpoint for the phase_1 and explode_bomb to prevent the bomb to "BOOM" while the inputs is incorrect.
(gdb) b phase_1  // break point for phase_1
Breakpoint 1 at 0x400e8d
(gdb) b explode_bomb // break point for explode_bomb
Breakpoint 2 at 0x401438 
(gdb) disas phase_1 
It shows the dump of the assembler code for function phase_1 so that only the code for phase_1 is displayed in order to find the value and defuse phase_1's bomb. 

Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi // value moved from soure to destination.
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal> // gives hint that the value is string.
   0x0000000000400e9b <+14>:    test   %eax,%eax // test for checking whether is it equal or not.
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) run //runing the code to try some inputs.
Starting program: /mnt/c/Users/karma/OneDrive/Desktop/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
hello // input

Since the value "hello" is not the expected answer, so the breakpoint is created are executed. 
Breakpoint 1, 0x0000000000400e8d in phase_1 () //break point
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) u* 0x0000000000400e9b // moved to the test's address
0x0000000000400e9b in phase_1 () // the pointer points to the particular address
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
=> 0x0000000000400e9b <+14>:    test   %eax,%eax // current code that is in execution.
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) i r //checking the value of register.
rax            0x1                 1
rbx            0x4021f0            4202992
rcx            0x5                 5
rdx            0x1                 1
rsi            0x4023cc            4203468
rdi            0x4023e9            4203497
rbp            0x0                 0x0
rsp            0x7ffffffee330      0x7ffffffee330
r8             0x6037a0            6305696
r9             0x0                 0
r10            0xfffffffffffff6ed  -2323
r11            0x7fffff5e7400      140737477768192
r12            0x400c60            4197472
r13            0x7ffffffee430      140737488282672
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

Moving to next line executing the current code.
(gdb) ni //moving to next line
0x0000000000400e9d in phase_1 ()
(gdb) disas //showing the functions of phase_1
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
=> 0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>// current code in execution
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.

Now, the current code that is pointed, checks whether the above test are equal or not. If it is equal then we moved to phase_1+23. Which means that the we moved to line 23 but if it is not equal then that command is skipped. 
(gdb) ni
0x0000000000400e9f in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
=> 0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb> //current code in execution
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.

Since the next command are add and all, we gave importance to the move command and checked the value for source.
(gdb) x/s 0x4023cc // printing the value for that address.
0x4023cc:       "Public speaking is very easy." //value for the 0x4023cc

Since, the value for 0x4023cc is string and before we got the hint that the expected value is string. So, we will delete the break point that was set earlier to run the code.

(gdb) delete// deleting breakpoints
Delete all breakpoints? (y or n) y
(gdb) b phase_2 // setting break point for next phase(phase_2")
Breakpoint 3 at 0x400ea9
(gdb) b explode_bomb
Breakpoint 4 at 0x401438
(gdb) run // Running the phase_1 code.
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/karma/OneDrive/Desktop/Assignment 1/bomb002/bomb

Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.// entered answer for phase_1 to defuse bomb.
Phase 1 defused. How about the next one? // Now, phase_1 is defused.
1 2 3 4 5 6
